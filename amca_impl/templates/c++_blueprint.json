{
  "c++": {
    "type": "directory",
    "content": {
      ".clang-format": {
        "type": "text_file",
        "content": "#### modified LLVM dump\n---\nLanguage:        Cpp\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    true\nAlignConsecutiveBitFields:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveDeclarations:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveMacros:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveShortCaseStatements:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCaseArrows: false\n  AlignCaseColons: false\nAlignConsecutiveTableGenBreakingDAGArgColons:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveTableGenCondOperatorColons:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveTableGenDefinitionColons:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignEscapedNewlines: Right\nAlignOperands:   Align\nAlignTrailingComments:\n  Kind:            Always\n  OverEmptyLines:  0\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowBreakBeforeNoexceptSpecifier: Never\nAllowShortBlocksOnASingleLine: Always\nAllowShortCaseExpressionOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortCompoundRequirementOnASingleLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: AllIfsAndElse\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterExternBlock: false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakAdjacentStringLiterals: true\nBreakAfterAttributes: Leave\nBreakAfterJavaFieldAnnotations: false\nBreakAfterReturnType: None\nBreakArrays:     true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: Always\nBreakBeforeBraces: Attach\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: AfterColon\nBreakFunctionDefinitionParameters: false\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: true\nBreakTemplateDeclarations: Yes\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentRequiresClause: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nInsertBraces:    false\nInsertNewlineAtEOF: false\nInsertTrailingCommas: None\nIntegerLiteralSeparator:\n  Binary:          0\n  BinaryMinDigits: 0\n  Decimal:         0\n  DecimalMinDigits: 0\n  Hex:             0\n  HexMinDigits:    0\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLines:\n  AtEndOfFile:     false\n  AtStartOfBlock:  true\n  AtStartOfFile:   true\nLambdaBodyIndentation: Signature\nLineEnding:      DeriveLF\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMainIncludeChar: Quote\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: BinPack\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakScopeResolution: 500\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nPPIndentWidth:   -1\nQualifierAlignment: Leave\nReferenceAlignment: Pointer\nReflowComments:  true\nRemoveBracesLLVM: false\nRemoveParentheses: Leave\nRemoveSemicolon: false\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSkipMacroDefinitionBody: false\nSortIncludes: Never \nSortJavaStaticImport: Before\nSortUsingDeclarations: LexicographicNumeric\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeJsonColon: false\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  AfterPlacementOperator: true\n  AfterRequiresInClause: false\n  AfterRequiresInExpression: false\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  Never\nSpacesInContainerLiterals: true\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInParens:  Never\nSpacesInParensOptions:\n  ExceptDoubleParentheses: false\n  InCStyleCasts:   false\n  InConditionalStatements: false\n  InEmptyParentheses: false\n  Other:           false\nSpacesInSquareBrackets: false\nStandard:        Latest\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTableGenBreakInsideDAGArg: DontBreak\nTabWidth:        8\nUseTab:          Never\nVerilogBreakBetweenInstancePorts: true\nWhitespaceSensitiveMacros:\n  - BOOST_PP_STRINGIZE\n  - CF_SWIFT_NAME\n  - NS_SWIFT_NAME\n  - PP_STRINGIZE\n  - STRINGIZE\n...\n\n"
      },
      ".clangd": {
        "type": "text_file",
        "content": "# Fragment common to C and C++ source files\nCompileFlags:\n  CompilationDatabase: \"./MesonBuildStuff/build/\"\n\n---\n# Fragment specific to C++ source files\nIf:\n    PathExclude: [.*\\.c, .*\\.h]\nCompileFlags:\n    Add:\n        - \"-std=c++23\"\n"
      },
      ".vscode": {
        "type": "directory",
        "content": {
          "launch.json": {
            "type": "text_file",
            "content": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug Compile\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/MesonBuildStuff/build/../../compiled/a\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"AMCA SoftDebug\"\n        },\n        {\n            \"name\": \"Debug ReBuild & Compile\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/MesonBuildStuff/build/../../compiled/a\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"AMCA HardDebug\"\n        }\n    ]\n}"
          },
          "settings.json": {
            "type": "text_file",
            "content": "{\n    \"mesonbuild.configureOnOpen\": false\n}"
          },
          "tasks.json": {
            "type": "text_file",
            "content": "{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"AMCA SoftDebug\",\n            \"type\": \"shell\",\n            \"command\": \"python MesonBuildStuff/amca.py -d -ne\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA HardDebug\",\n            \"type\": \"shell\",\n            \"command\": \"python MesonBuildStuff/amca.py -s -d -ne\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA Clear Build\",\n            \"type\": \"shell\",\n            \"command\": \"python MesonBuildStuff/amca.py -clear\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA SoftCompile release\",\n            \"type\": \"shell\",\n            \"command\": \"python MesonBuildStuff/amca.py -r -ne\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA HardCompile release\",\n            \"type\": \"shell\",\n            \"command\": \"python MesonBuildStuff/amca.py -s -r -ne\",\n            \"problemMatcher\": []\n        },\n    ]\n}"
          }
        }
      },
      "meson.build": {
        "type": "text_file",
        "content": "project('compiler2', ['cpp', 'c'],\n  version : '0.1',\n  default_options : ['warning_level=3', 'cpp_std=c++23', 'buildtype=debug', 'optimization=2', 'debug=true'])\n# To build in release mode, run: meson setup build --buildtype=release\n\n# DO NOT change variable names; AMCA relies on these.\nmain_file = 'src/main.cpp'\noutput_name = 'a'\noutput_dir = '../../compiled'  # Relative to meson.build location\nbuild_dir_where = 'MesonBuildStuff/build'  # Relative to meson.build location\n\n# Compiler arguments\ncpp_compiler_args = [   \n  '-Og',\n  '-g',\n  '-Wall', \n  '-Wextra',\n  '-pedantic',\n  '-O2',\n  '-lstdc++exp',\n  '-static-libgcc', \n  '-static-libstdc++',\n]\nc_compiler_args = [\n  '-static-libgcc', \n  '-static-libstdc++',\n]\n\n# Normalize paths\nmain_file = main_file.replace('/', '\\\\')\noutput_dir = output_dir.replace('/', '\\\\')\nif not output_dir.startswith('\\\\')\n  output_dir = '\\\\' + output_dir\nendif\nif not output_dir.endswith('\\\\') and output_dir != ''\n  output_dir = ''.join([output_dir, '\\\\'])\nendif\noutput_dir = meson.project_build_root() + output_dir\n\n# Import subprojects/options\ncmake = import('cmake')\nfs = import('fs')\nopt_var_mimalloc = cmake.subproject_options()\nopt_var_mimalloc.add_cmake_defines({'MI_SECURE': false})\nopt_var_mimalloc.add_cmake_defines({'MI_BUILD_TESTS': false})\nopt_var_mimalloc.add_cmake_defines({'MI_BUILD_SHARED': false})\n\n# Dependencies (if any)\ndependencies = []\ndependencies_str = []\nforeach item : dependencies_str\n  dependencies += dependency(item)\nendforeach\n\n# Use a custom Python globber to list all source files.\nsource_files = run_command('python', 'MesonBuildStuff/globber.py', './', '*.cpp', '*.cxx', '*.cc', '*.c', check : true).stdout().strip().split('\\n')\n\n# Exclude the main file (to avoid duplicate inclusion)\nsource_files_no_main_file = []\nforeach item : source_files\n  if item != main_file\n    source_files_no_main_file += item\n  endif\nendforeach\n\n# Include directories\nif fs.is_dir('./include/')\n  headers = include_directories('./include/') \nelif fs.is_dir('./src/include/')\n  headers = include_directories('./src/include/') \nelse\n  headers = []\nendif\n\nexecutable(output_name,\n  [main_file, source_files_no_main_file],\n  dependencies : dependencies,\n  include_directories : headers,\n  cpp_args : cpp_compiler_args,\n  c_args : c_compiler_args,\n  link_args : ['-static', '-static-libgcc', '-static-libstdc++'],\n  install : true,\n  install_dir : output_dir)\n\n# Print build context\nmessage('\\033[2K\\r\\nsource files: \\n   ', '   '.join(source_files), '\\noutputs to:\\n   ', output_dir + output_name, '\\n')\n"
      },
      "MesonBuildStuff": {
        "type": "directory",
        "content": {
          "amca.py": {
            "type": "text_file",
            "content": "import os, re, sys, subprocess\n\n################### Automatic Meson Compiler Application (AMCA) ###########################\n# This version includes automatic detection of new source files.\n# If new files are detected, a minimal reconfiguration (meson setup --reconfigure <builddir>)\n# is triggered so that the new files are added without a full rebuild.\n\nFollowArgs = {\n    \"-ms\": '5',  # max Searches, 5 by default\n}\n\nTriggerArgs = {\n    \"-s\": False,   # force running setup.py (full reconfiguration)\n    \"-r\": False,   # compile in release mode\n    \"-d\": False,   # compile in debug mode (should be default in meson.build)\n    \"-ne\": False,  # just compile, don't execute\n    \"-nc\": False,  # don't compile, just run\n    \"-nb\": False,  # disable separation between build/compile and execution\n    \"-c\": False,   # clear terminal before execution\n    \"-m\": False,   # move terminal to output path\n    \"-Ab\": [False, len(sys.argv)],  # additional args for meson build\n    \"-Ac\": [False, len(sys.argv)],  # additional args for meson compile\n    \"-Ae\": [False, len(sys.argv)],  # additional args for the executable\n    \"-clear\": False,  # removes build folder, executable and source cache\n    \"--help\": False,\n}\n\n# --- Source Cache Functions ---\ndef get_cache_path():\n    # Place .sources_cache in the same folder as this script (MesonBuildStuff/)\n    return os.path.join(os.path.dirname(__file__), \".sources_cache\")\n\ndef get_current_sources():\n    try:\n        output = subprocess.check_output(\n            [sys.executable, 'MesonBuildStuff/globber.py', './', '*.cpp', '*.cxx', '*.cc', '*.c'],\n            universal_newlines=True\n        )\n        return set(filter(None, output.strip().split('\\n')))\n    except subprocess.CalledProcessError as e:\n        print(\"Error running globber.py:\", e)\n        return set()\n\ndef read_cached_sources():\n    cache_file = get_cache_path()\n    if os.path.exists(cache_file):\n        with open(cache_file, 'r', encoding='utf-8') as f:\n            return set(filter(None, f.read().strip().split('\\n')))\n    return set()\n\ndef write_cached_sources(sources):\n    cache_file = get_cache_path()\n    with open(cache_file, 'w', encoding='utf-8') as f:\n        f.write('\\n'.join(sorted(sources)))\n\ndef check_for_new_sources():\n    current_sources = get_current_sources()\n    cached_sources = read_cached_sources()\n    if current_sources != cached_sources:\n        write_cached_sources(current_sources)\n        return True\n    return False\n\n# --- End Source Cache Functions ---\n\ndef main():\n    target_file = \"meson.build\"\n    basedir = os.path.realpath(os.path.join(__file__, \"..\\\\..\"))\n    meson_file_path = os.path.join(basedir, target_file)\n\n    setupPy_path = os.path.join(basedir, \"MesonBuildStuff\", \"amcaSetup.py\")\n    buildpathdir = getNameMesonVarDecl(meson_file_path, \"build_dir_where\").split(\"'\")[1].replace('/', '\\\\').removeprefix('\\\\')  # relative to basedir\n    totBpath = os.path.realpath(os.path.join(basedir, buildpathdir))\n\n    output_dir = getNameMesonVarDecl(meson_file_path, \"output_dir\").split(\"'\")[1].replace('/', '\\\\').removeprefix('\\\\')\n    output_name = getNameMesonVarDecl(meson_file_path, \"output_name\").split(\"'\")[1].replace('/', '\\\\').removeprefix('\\\\')\n    output_TOTAL_dir = os.path.realpath(os.path.join(basedir, buildpathdir, output_dir))\n    output_TOTAL = os.path.join(output_TOTAL_dir, output_name)\n    output_TOTAL_win = output_TOTAL + '.exe'\n\n    if TriggerArgs['-clear']:\n        # Remove build artifacts...\n        success = (\n            tryrem(output_TOTAL)\n            & tryrem(output_TOTAL_win)\n            & tryremD(output_TOTAL_dir)\n            & tryremF(totBpath)\n        )\n        # Also remove the source cache file stored in MesonBuildStuff\n        cache_file = get_cache_path()\n        if os.path.exists(cache_file):\n            success = tryrem(cache_file) and success\n        if success:\n            print(\"All items successfully removed\")\n        else:\n            print(\"Not all items were successfully removed\")\n        os._exit(int(not success))  # 0 indicates success\n\n    os.chdir(basedir)\n    didntbuild = True\n    if TriggerArgs[\"-s\"] or not os.path.exists(totBpath):\n        mode = '--buildtype=release --debug=false' if TriggerArgs[\"-r\"] else \"\"\n        mode = '--buildtype=debug' if TriggerArgs[\"-d\"] else mode\n        args = ' '.join(GetArgs(\"-Ab\"))\n        didntbuild = os.system(' '.join([f'\"{sys.executable}\"', setupPy_path, mode, args]))\n        if didntbuild:\n            os._exit(1)\n    \n    # Automatically check for new source files and perform minimal reconfiguration\n    if not TriggerArgs[\"-s\"]:\n        if check_for_new_sources():\n            print(\"New source files detected. Running minimal reconfiguration...\")\n            reconfig_ret = os.system(f'meson setup --reconfigure {buildpathdir}')\n            if reconfig_ret:\n                print(\"Reconfiguration failed!\")\n                sys.exit(reconfig_ret)\n\n    if not TriggerArgs[\"-nc\"]:  # compilation\n        args = ' '.join(GetArgs(\"-Ac\"))\n        didntcompile = os.system(' '.join(['ninja -C', buildpathdir, args]))\n        if not didntcompile:\n            didntcompile = os.system(f\"meson install -C {buildpathdir}\")\n        if didntcompile:\n            os._exit(2)\n\n    if not TriggerArgs[\"-ne\"] or TriggerArgs[\"-m\"]:  # execution\n        if (not TriggerArgs[\"-nc\"] or not didntbuild) and not TriggerArgs[\"-c\"]:\n            os.system('echo[')\n            os.system('echo ---------------------------------------------------------------------------------------------')\n            os.system('echo[')\n        if TriggerArgs['-c']:\n            os.system('cls')\n        outcommand = output_TOTAL + ' ' + ' '.join(GetArgs(\"-Ae\"))\n        if TriggerArgs[\"-m\"]:  # switch terminal path\n            if not TriggerArgs[\"-ne\"]:\n                os.system(f'(echo cd {output_TOTAL_dir} && echo {outcommand}) | clip')\n                print(\"Everything has been copied to your clipboard. Just press Ctrl+V to print and execute.\")\n            else:\n                os.system(f'echo cd {output_TOTAL_dir} | clip')\n                print(\"Everything has been copied to your clipboard. Just press Ctrl+V to change the directory.\")\n            print(\"\\nIt's sadly not possible to change the terminal directory with Python, so this is the solution.\")\n            os._exit(0)\n        else:\n            os._exit(os.system(outcommand))\n\ndef getNameMesonVarDecl(filepath, variablename):\n    regex = re.compile(rf'^{variablename}\\s*=')\n    out = 'NOT_FOUND'\n    try:\n        with open(filepath, 'r', encoding='utf-8') as file:\n            for line in file:\n                if regex.match(line):\n                    out = line\n                    break\n            else:\n                print(f\"No {variablename} found in {filepath}.\")\n    except FileNotFoundError:\n        print(f\"{filepath} not found.\")\n    except Exception as e:\n        print(f\"An error occurred looking for {variablename}: {e}\")\n    return out\n\ndef GetArgOption(arg_dict):\n    toggle = True\n    for x in range(len(sys.argv) - 1):  # -1 to avoid out-of-bounds error on last argument\n        if sys.argv[x] in ['-Ab', '-Ac', '-Ae']:\n            toggle = False\n        elif sys.argv[x] in arg_dict and toggle:\n            arg_dict[sys.argv[x]] = sys.argv[x + 1]\n    return arg_dict\n\ndef GetArgPresent(arg_dict):\n    toggle = True\n    for x in range(len(sys.argv)):\n        if sys.argv[x] in ['-Ab', '-Ac', '-Ae']:\n            arg_dict[sys.argv[x]] = [True, x]\n            toggle = False\n        elif sys.argv[x] in arg_dict and toggle:\n            arg_dict[sys.argv[x]] = True\n    return arg_dict\n\ndef GetArgs(Option):\n    out = []\n    optargs = [\"-Ab\", \"-Ac\", \"-Ae\"]\n    optargs.remove(Option)\n    toggle = False\n    for x in sys.argv:\n        if x in optargs:\n            toggle = False\n        elif x == Option:\n            toggle = True\n        elif toggle:\n            out.append(x)\n    return out\n\ndef delete_directory(filepath):\n    if not os.path.exists(filepath):\n        print(f\"Error: The directory '{filepath}' does not exist.\")\n        return False\n    for root, dirs, files in os.walk(filepath, topdown=False):\n        for name in files:\n            file_path = os.path.join(root, name)\n            try:\n                os.remove(file_path)\n            except Exception as e:\n                print(f\"Error deleting file {file_path}: {e}\")\n                return False\n        for name in dirs:\n            dir_path = os.path.join(root, name)\n            try:\n                os.rmdir(dir_path)\n            except Exception as e:\n                print(f\"Error deleting directory {dir_path}: {e}\")\n                return False\n    try:\n        os.rmdir(filepath)\n    except Exception as e:\n        print(f\"Error deleting directory {filepath}: {e}\")\n        return False\n    return True\n\ndef tryrem(filepath):\n    if os.path.exists(filepath):\n        try:\n            os.remove(filepath)\n            if os.path.exists(filepath):\n                return False\n        except:\n            return False\n    return True\n\ndef tryremF(filepath):\n    if os.path.exists(filepath):\n        try:\n            return delete_directory(filepath)\n        except:\n            return False\n    return True\n\ndef tryremD(filepath):\n    if os.path.exists(filepath):\n        try:\n            os.removedirs(filepath)\n            if os.path.exists(filepath):\n                return False\n        except:\n            return False\n    return True\n\ndef ensure_installed(packages):\n    \"\"\"\n    Checks if the given packages are installed.\n    This version uses a marker file located in the MesonBuildStuff folder to perform the check only once.\n    \"\"\"\n    marker = os.path.join(os.path.dirname(__file__), \".amca_deps_checked\")\n    if os.path.exists(marker):\n        return\n    for package in packages:\n        try:\n            __import__(package)\n        except ImportError:\n            print(f\"Installing {package}...\")\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    # Create the marker file so subsequent runs skip dependency checking\n    try:\n        with open(marker, \"w\") as f:\n            f.write(\"dependencies installed\")\n    except Exception as e:\n        print(f\"Failed to create marker file: {e}\")\n\ndef PrintHelp():\n    print(\"Automatic Meson Compiler Application\")\n    print(\"Designed to work with blues & Delici0us setup\")\n    print(\"Arguments:\")\n    print(\"    -ms amount     Max search depth for meson.build. 5 by default, will be replaced by amount\")\n    print(\"    --help         Display help message\")\n    print(\"    -s             Run setup.py (full reconfiguration)\")\n    print(\"    -r             Compile in release mode\")\n    print(\"    -d             Compile in debug mode\")\n    print(\"    -ne            Just compile, don't execute\")\n    print(\"    -nc            Don't compile, just run\")\n    print(\"                   If both -ne and -nc are present, nothing will compile or run\")\n    print(\"    -nb            Disable separation between building/compilation and execution\")\n    print(\"    -c             Clear terminal before execution\")\n    print(\"    -m             Move terminal to output path\")\n    print(\"    -Ab            Toggle all following args for the meson build\")\n    print(\"    -Ac            Toggle all following args for the meson compile\")\n    print(\"    -Ae            Toggle all following args for the executable\")\n    print(\"                   -Ab, -Ac and -Ae will interrupt each other\")\n    print(\"    -clear         Remove build folder, executable and source cache (in MesonBuildStuff)\")\n    print(f\"    Amca.py found at {__file__}\")\n    print(\"                   If this is not the correct amca, try reducing your search radius with -ms\")\n\nif __name__ == \"__main__\":\n    ensure_installed([\"pip\", \"meson\", \"ninja\"])\n    GetArgPresent(TriggerArgs)\n    if TriggerArgs[\"--help\"]:\n        PrintHelp()\n        exit()\n    GetArgOption(FollowArgs)\n    try:\n        MAXSEARCHLVL = int(FollowArgs['-ms'])\n        assert MAXSEARCHLVL >= 0\n    except:\n        print(\"Please input a valid integer as maxSearches\")\n        exit()\n    main()\n"
          },
          "amcaSetup.py": {
            "type": "text_file",
            "content": "import os, sys, re, json\n\n\n################ Bloat ######################\ndef getNameMesonVarDecl(filepath, variablename):\n    regex = re.compile(rf'^{variablename}\\s*=')\n    out = 'NOT_FOUND'\n\n    try:\n        with open(filepath, 'r', encoding='utf-8') as file:\n            for line in file:\n                if regex.match(line):\n                    out = line\n                    break\n            else:\n                print(f\"No {variablename} found in {filepath}.\")\n    except FileNotFoundError:\n        print(f\"{filepath} not found.\")\n    except Exception as e:\n        print(f\"An error occurred Looking for {variablename}: {e}\")\n    return out\n\ndef update_launch_json(output_full):\n    vscode_folder = os.path.join(os.getcwd(), \".vscode\")\n    launch_json_path = os.path.join(vscode_folder, \"launch.json\")\n\n    if not os.path.exists(launch_json_path):\n        print(\"launch.json not found. Skipping modification.\")\n        return\n\n    try:\n        with open(launch_json_path, \"r\", encoding=\"utf-8\") as file:\n            data = json.load(file)\n\n        for config in data.get(\"configurations\", []):\n            config[\"program\"] = \"${workspaceFolder}/\" + output_full.replace(\"\\\\\", \"/\")\n\n        with open(launch_json_path, \"w\", encoding=\"utf-8\") as file:\n            json.dump(data, file, indent=4)\n        print(\"Updated launch.json successfully.\")\n    except Exception as e:\n        print(f\"Failed to update launch.json: {e}\")\n\ntarget_file = \"meson.build\"\nbasedir = os.path.realpath(os.path.join(__file__, \"..\\\\..\"))\nmeson_file_path = os.path.join(basedir, target_file)\n\noutput_dir = getNameMesonVarDecl(meson_file_path, \"output_dir\").split(\"'\")[1].replace('/', '\\\\').removeprefix('\\\\')\noutput_name = getNameMesonVarDecl(meson_file_path, \"output_name\").split(\"'\")[1].replace('/', '\\\\').removeprefix('\\\\')\nbuild_dir_name = getNameMesonVarDecl(meson_file_path, \"build_dir_where\").split(\"'\")[1].replace('/', '\\\\').removeprefix('\\\\')\noutput_full = os.path.join(build_dir_name, output_dir, output_name)\n################# end bloat ##################\n\nupdate_launch_json(output_full)\n\nargs = ' '.join([sys.argv[x] for x in range(1, len(sys.argv))])\n\nos.chdir(os.path.realpath(os.path.join(__file__, '../..')))\nprint(''.join([\"meson setup \", build_dir_name,  \" --wipe \", args]))\nsys.exit(os.system(''.join([\"meson setup \", build_dir_name,  \" --wipe \", args])))"
          },
          "globber.py": {
            "type": "text_file",
            "content": "import os\nimport sys\nfrom pathlib import Path\n\ndef parse_directory(directory: str, filetype: str) -> list:\n  filelist: list = list()\n  \n  for file in Path(directory).rglob(filetype):\n    file_directory: str = file.__str__()\n    if \"subprojects\" in file_directory:\n      continue\n    if \"build\" in file_directory:\n      continue\n    filelist.append(file)\n  \n  return filelist\n\ndef glob(args: list) -> None:\n  directory: str = sys.argv[1]\n  filetypes: list = [i for i in sys.argv[2:] if i != \"\"]\n  files: list = list()\n\n  for filetype in filetypes:\n    files.extend(parse_directory(directory, filetype))\n\n  for file in files:\n    print(file)\n\ndef main():\n  args: int = len(sys.argv)\n  if args < 3:\n    print(\"not enough arguments supplied!\")\n    print(f\"usage: python {os.path.basename(__file__)} path_to_glob file_types\")\n    return 1;\n  \n  glob(args)\n  \n  return 0\n\nif __name__ == \"__main__\":\n  main()"
          }
        }
      },
      "src": {
        "type": "directory",
        "content": {
          "main.cpp": {
            "type": "text_file",
            "content": "#include <filesystem>\n#include <iostream>\n\nint main() {\n  std::cout << \"I am being run from: \" << std::filesystem::current_path() << \"\\n\";\n  return 0;\n}"
          }
        }
      }
    }
  }
}