{
  "c++": {
    "type": "directory",
    "content": {
      ".clang-format": {
        "type": "text_file",
        "content": "#### modified LLVM dump\n---\nLanguage:        Cpp\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    true\nAlignConsecutiveBitFields:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveDeclarations:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveMacros:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveShortCaseStatements:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCaseArrows: false\n  AlignCaseColons: false\nAlignConsecutiveTableGenBreakingDAGArgColons:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveTableGenCondOperatorColons:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignConsecutiveTableGenDefinitionColons:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  AlignFunctionPointers: false\n  PadOperators:    false\nAlignEscapedNewlines: Right\nAlignOperands:   Align\nAlignTrailingComments:\n  Kind:            Always\n  OverEmptyLines:  0\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowBreakBeforeNoexceptSpecifier: Never\nAllowShortBlocksOnASingleLine: Always\nAllowShortCaseExpressionOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortCompoundRequirementOnASingleLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: AllIfsAndElse\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterExternBlock: false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakAdjacentStringLiterals: true\nBreakAfterAttributes: Leave\nBreakAfterJavaFieldAnnotations: false\nBreakAfterReturnType: None\nBreakArrays:     true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: Always\nBreakBeforeBraces: Attach\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: AfterColon\nBreakFunctionDefinitionParameters: false\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: true\nBreakTemplateDeclarations: Yes\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentRequiresClause: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nInsertBraces:    false\nInsertNewlineAtEOF: false\nInsertTrailingCommas: None\nIntegerLiteralSeparator:\n  Binary:          0\n  BinaryMinDigits: 0\n  Decimal:         0\n  DecimalMinDigits: 0\n  Hex:             0\n  HexMinDigits:    0\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLines:\n  AtEndOfFile:     false\n  AtStartOfBlock:  true\n  AtStartOfFile:   true\nLambdaBodyIndentation: Signature\nLineEnding:      DeriveLF\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMainIncludeChar: Quote\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: BinPack\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakScopeResolution: 500\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nPPIndentWidth:   -1\nQualifierAlignment: Leave\nReferenceAlignment: Pointer\nReflowComments:  true\nRemoveBracesLLVM: false\nRemoveParentheses: Leave\nRemoveSemicolon: false\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSkipMacroDefinitionBody: false\nSortIncludes: Never \nSortJavaStaticImport: Before\nSortUsingDeclarations: LexicographicNumeric\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeJsonColon: false\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  AfterPlacementOperator: true\n  AfterRequiresInClause: false\n  AfterRequiresInExpression: false\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  Never\nSpacesInContainerLiterals: true\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInParens:  Never\nSpacesInParensOptions:\n  ExceptDoubleParentheses: false\n  InCStyleCasts:   false\n  InConditionalStatements: false\n  InEmptyParentheses: false\n  Other:           false\nSpacesInSquareBrackets: false\nStandard:        Latest\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTableGenBreakInsideDAGArg: DontBreak\nTabWidth:        8\nUseTab:          Never\nVerilogBreakBetweenInstancePorts: true\nWhitespaceSensitiveMacros:\n  - BOOST_PP_STRINGIZE\n  - CF_SWIFT_NAME\n  - NS_SWIFT_NAME\n  - PP_STRINGIZE\n  - STRINGIZE\n...\n\n"
      },
      ".clangd": {
        "type": "text_file",
        "content": "# Fragment common to C and C++ source files\nCompileFlags:\n  CompilationDatabase: \"./MesonBuildStuff/build/\"\n\n---\n# Fragment specific to C++ source files\nIf:\n    PathExclude: [.*\\.c, .*\\.h]\nCompileFlags:\n    Add:\n        - \"-std=c++23\"\n"
      },
      ".vscode": {
        "type": "directory",
        "content": {
          "launch.json": {
            "type": "text_file",
            "content": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug Compile\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/MesonBuildStuff/build/../../compiled/a\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"AMCA SoftDebug\"\n        },\n        {\n            \"name\": \"Debug ReBuild & Compile\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/MesonBuildStuff/build/../../compiled/a\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"AMCA HardDebug\"\n        }\n    ]\n}"
          },
          "settings.json": {
            "type": "text_file",
            "content": "{\n    \"mesonbuild.configureOnOpen\": false\n}"
          },
          "tasks.json": {
            "type": "text_file",
            "content": "{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"AMCA SoftDebug\",\n            \"type\": \"shell\",\n            \"command\": \"amca -d -ne\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA HardDebug\",\n            \"type\": \"shell\",\n            \"command\": \"amca -s -d -ne\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA Clear Build\",\n            \"type\": \"shell\",\n            \"command\": \"amca -clear\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA SoftCompile release\",\n            \"type\": \"shell\",\n            \"command\": \"amca -r -ne\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"AMCA HardCompile release\",\n            \"type\": \"shell\",\n            \"command\": \"amca -s -r -ne\",\n            \"problemMatcher\": []\n        },\n    ]\n}"
          }
        }
      },
      "meson.build": {
        "type": "text_file",
        "content": "project('CHANGEME', ['cpp', 'c'],\n  version : '0.1',\n  default_options : ['warning_level=3', 'cpp_std=c++23', 'buildtype=debug', 'optimization=0', 'debug=true'])\n# To build in release mode, run: meson setup build --buildtype=release\n\n# DO NOT change variable names; AMCA relies on these.\noutput_name = 'a'\noutput_dir = '../compiled'  # Relative to meson.build location\nbuild_dir_where = 'build'  # Relative to meson.build location\n\n# Compiler arguments\ncpp_compiler_args = [   \n  # '-Og',\n  '-g',\n  '-Wall', \n  '-Wextra',\n  '-pedantic',\n  # '-O2',\n  # '-lstdc++exp',\n  '-static-libgcc', \n  '-static-libstdc++',\n]\nc_compiler_args = [\n  '-static-libgcc', \n  '-static-libstdc++',\n]\n\n# Normalize paths\noutput_dir = output_dir.replace('/', '\\\\')\nif not output_dir.startswith('\\\\')\n  output_dir = '\\\\' + output_dir\nendif\nif not output_dir.endswith('\\\\') and output_dir != ''\n  output_dir = ''.join([output_dir, '\\\\'])\nendif\noutput_dir = meson.project_build_root() + output_dir\n\ncmake = import('cmake')\nfs    = import('fs')\n\n# Dependencies (if any)\ndependencies = []\ndependencies_str = []\nforeach item : dependencies_str\n  dependencies += dependency(item)\nendforeach\n\n# get localappdata path\nlocalappdata_cmd = run_command('cmd', '/c', 'echo %LOCALAPPDATA%', check : false)\nif localappdata_cmd.returncode() == 0\n  localappdata_path = localappdata_cmd.stdout().strip()\nelse\n  error('Failed to retrieve LOCALAPPDATA path.')\nendif\n\n# Use a custom Python globber to list all source files.\nsource_files = run_command('python', localappdata_path + '\\\\amca\\\\snakes\\\\globber.py', './', '*.cpp', '*.cxx', '*.cc', '*.c', check : true).stdout().strip().split('\\n')\n\n# Include directories\nif fs.is_dir('./include/')\n  headers = include_directories('./include/') \nelif fs.is_dir('./src/include/')\n  headers = include_directories('./src/include/') \nelse\n  headers = []\nendif\n\nexecutable(output_name,\n  [source_files],\n  dependencies : dependencies,\n  include_directories : headers,\n  cpp_args : cpp_compiler_args,\n  c_args : c_compiler_args,\n  link_args : ['-static', '-static-libgcc', '-static-libstdc++'],\n  install : true,\n  install_dir : output_dir)\n\n# Print build context\nmessage('\\033[2K\\r\\nsource files: \\n   ', '   '.join(source_files), '\\noutputs to:\\n   ', output_dir + output_name, '\\n')\n"
      },
      "src": {
        "type": "directory",
        "content": {
          "main.cpp": {
            "type": "text_file",
            "content": "#include <filesystem>\n#include <iostream>\n\nint main() {\n  std::cout << \"I am being run from: \" << std::filesystem::current_path() << \"\\n\";\n  return 0;\n}"
          }
        }
      }
    }
  }
}